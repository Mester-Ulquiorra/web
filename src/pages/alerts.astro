---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getAPIRoute } from "../scripts/functions";

const alertsRoute = getAPIRoute("ws");

import "../styles/alerts.css";
---

<BaseLayout title="Alerts">
  <main id="alerts" data-route={alertsRoute}></main>
</BaseLayout>

<style>
  main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 24rem), 1fr));
    grid-auto-rows: min-content;
    grid-gap: 1rem;
  }
</style>

<script>
  import { type Alert, type AlertType, isAppealAlert } from "../scripts/types";

  const alertsMainElem = document.getElementById("alerts") as HTMLElement;
  const alertsRoute = alertsMainElem.dataset.route as string;

  const ws = new WebSocket(alertsRoute);

  const alertHistory = JSON.parse(
    localStorage.getItem("alertHistory") ?? "[]"
  ) as Alert<AlertType>[];

  alertHistory.length > 0 &&
    alertHistory.map((alert) => {
      const alertElement = document.createElement("div");
      alertElement.className = alert.data.status;
      alertElement.innerHTML = alert.data.reason;

      alertsMainElem.prepend(alertElement);
    });

  ws.onmessage = (msg: MessageEvent<string>) => {
    if (msg.data === "ping" || msg.data.startsWith("welcome")) return;

    const alert = JSON.parse(msg.data) as Alert<AlertType>;

    alertHistory.push(alert);
    localStorage.setItem("alertHistory", JSON.stringify(alertHistory));

    const alertElement = document.createElement("div");

    if (isAppealAlert(alert)) {
      // using className like this will work for now, but with more alert types it'll become spaghetti code
      alertElement.className = alert.data.status;
      alertElement.innerHTML = alert.data.reason;
    }

    // when we have more alert types, we can add more cases here

    alertsMainElem.prepend(alertElement);
  };
</script>
