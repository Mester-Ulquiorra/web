---
import { getAPIRoute } from "../../scripts/api";
import ServerLink from "./ServerLink.astro";
import UserInfo from "./UserInfo.astro";

interface Props {
  userId: string;
  avatar: string;
  userTag: string;
}

const { userId, avatar, userTag } = Astro.props;

const logoutRoute = getAPIRoute("logout");
---

<user-profile>
  <UserInfo {userId} {userTag} {avatar} />
  <menu>
    <a href="/profile">Profile</a>
    <ServerLink />
    <form action={logoutRoute}>
      <button type="submit">Log out</button>
    </form>
  </menu>
</user-profile>

<style lang="scss">
  user-profile {
    display: inline-flex;
    gap: 0.5rem;
    position: relative;
    cursor: pointer;
    z-index: 4;
  }

  a {
    background-color: transparent;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: var(--transition);

    &:hover {
      background-color: var(--primary);
      color: var(--on-primary);
    }
  }

  button {
    background-color: transparent;
    padding: 0.5rem;
  }

  menu {
    display: grid;
    visibility: hidden;
    opacity: 0;
    gap: 0.5rem;
    font-weight: bold;
    position: absolute;
    left: 0;
    right: 0;
    width: 100%;
    padding: 0.5rem;
    margin: 0.75rem 0;
    transition: var(--transition);
    background-color: var(--bg);
    border-radius: 0 0 calc(var(--border-radius) * 1.5)
      calc(var(--border-radius) * 1.5);
    border: var(--border);
    border-top: none;
    top: 0.5rem;

    &[open] {
      visibility: visible;
      opacity: 1;
      top: 1.5rem;
    }
  }

  form {
    width: 100%;
    background-color: transparent;
    border-radius: var(--border-radius);
    transition: var(--transition);

    &:hover {
      background-color: var(--primary);
      color: var(--on-primary);
    }
  }
</style>

<script>
  class UserProfile extends HTMLElement {
    constructor() {
      super();
      const menu = this.querySelector("menu")!;
      const userInfo = this.querySelector("div")!;

      if (window.matchMedia("(max-width:768px)").matches) {
        document.addEventListener("click", (e) => {
          if (
            (e.target as HTMLElement).closest("user-profile") &&
            !menu.hasAttribute("open")
          ) {
            this.toggleMenu(menu, userInfo);
          } else {
            this.closeMenu(menu, userInfo);
          }
        });
      } else {
        this.addEventListener("mouseover", () => this.openMenu(menu, userInfo));
        this.addEventListener("mouseout", () => this.closeMenu(menu, userInfo));
      }
    }

    toggleMenu(menu: HTMLMenuElement, userInfo: HTMLDivElement) {
      menu.toggleAttribute("open");
      userInfo.style.borderColor = "var(--text)";
    }

    openMenu(menu: HTMLMenuElement, userInfo: HTMLDivElement) {
      menu.setAttribute("open", "");
      userInfo.style.borderColor = "var(--text)";
    }

    closeMenu(menu: HTMLMenuElement, userInfo: HTMLDivElement) {
      menu.removeAttribute("open");
      userInfo.style.borderColor = "transparent";
    }
  }

  customElements.define("user-profile", UserProfile);
</script>
