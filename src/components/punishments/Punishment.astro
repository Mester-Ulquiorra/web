---
import { PunishmentTypes } from "../../scripts/api";
import { localDate } from "../../scripts/functions";
import PunishmentMenu from "./PunishmentMenu.astro";

interface Props {
  id: string;
  type: number;
  reason: string;
  moderator: string;
  at: number;
  until: number;
  active: boolean;
  appealed: boolean;
}

const { id, type, reason, moderator, at, until, active, appealed } = Astro.props;

let untilString = "";
const atString = localDate(at);

if ((PunishmentTypes[type] === "Mute" || PunishmentTypes[type] === "Ban") && until === -1) {
  if (active === true) {
    untilString = "Permanent";
  }
} else if (until !== -1) {
  untilString = localDate(until);
}
---

<div class:list={["punishment", active ? "active" : ""]} data-id={id}>
  <p><b>Type:</b><span>{PunishmentTypes[type]}</span></p>
  <p><b>Reason:</b><span>{reason}</span></p>
  <p><b>Moderator:</b><span>{moderator}</span></p>
  <p><b>At:</b><span>{atString}</span></p>
  {
    untilString !== "" ? (
      <p>
        <b>Until:</b>
        {untilString}
      </p>
    ) : (
      ""
    )
  }
  <PunishmentMenu {id} {active} {appealed} />
</div>

<style>
  div {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    background-color: var(--bg);
    padding: 1rem;
    border-radius: var(--border-radius);
    border: var(--border);
    transition: var(--transition);
    position: relative;

    &:not(.active) {
      opacity: 50%;
    }
  }

  p {
    display: inline-flex;
  }
  
  span {
    hyphens: auto;
    -webkit-hyphens: auto;
    overflow-wrap: anywhere;
  }

  b {
    margin-right: 0.25rem;
  }
</style>
