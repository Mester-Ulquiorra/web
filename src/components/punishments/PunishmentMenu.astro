---
import Icons from "../Icons.astro";
import AppealButton from "./AppealButton.astro";
import CopyPunishmentId from "./CopyPunishmentId.astro";

interface Props {
  id: string;
  active: boolean;
}

const { id, active } = Astro.props;
---

<div class="punishment-menu" data-id={id}>
  <Icons name="menu" />
  <menu>
    <CopyPunishmentId {id} />
    {active && <AppealButton {id} />}
  </menu>
</div>

<style>
  div {
    position: absolute;
    align-self: end;
    transition: var(--transition);
    padding: 0.25rem;
    border-radius: var(--border-radius);
    cursor: pointer;

    &:hover {
      background-color: var(--primary);
      color: var(--on-primary);
    }
  }

  menu {
    display: grid;
    z-index: 2;
    right: 0;
    position: absolute;
    width: max-content;
    background-color: var(--bg);
    color: var(--text);
    padding: 0.5rem;
    border-radius: calc(var(--border-radius) * 1.5);
    border: var(--border);
    visibility: hidden;
    opacity: 0;
    transition: var(--transition);

    &[open] {
      visibility: visible;
      opacity: 1;
    }
  }
</style>

<script>
  import { $toastText } from "../../scripts/stores";

  const punishmentMenus = document.querySelectorAll(
    ".punishment-menu"
  ) as NodeListOf<HTMLDivElement>;

  for (const punishmentMenu of punishmentMenus) {
    const id = punishmentMenu.dataset.id as string;

    const menu = punishmentMenu.querySelector("menu") as HTMLMenuElement;
    document.addEventListener("click", (e) => {
      if (
        (e.target as HTMLElement).closest(
          `.punishment-menu[data-id="${id}"]`
        ) &&
        !menu.hasAttribute("open")
      ) {
        menu.toggleAttribute("open");
      } else {
        menu.removeAttribute("open");
      }
    });
  }
</script>
