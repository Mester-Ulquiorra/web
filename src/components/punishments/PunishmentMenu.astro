---
import Icons from "../Icons.astro";
import AppealButton from "./AppealButton.astro";
import CopyPunishmentId from "./CopyPunishmentId.astro";

interface Props {
  id: string;
  active: boolean;
}

const { id, active } = Astro.props;
---

<punishment-menu data-id={id}>
  <Icons name="menu" />
  <menu>
    <CopyPunishmentId {id} />
    {active && <AppealButton {id} />}
  </menu>
</punishment-menu>

<style>
  punishment-menu {
    position: absolute;
    align-self: end;
    transition: var(--transition);
    padding: 0.25rem;
    border-radius: var(--border-radius);
    cursor: pointer;
  }

  menu {
    display: grid;
    z-index: 2;
    right: 0;
    position: absolute;
    width: max-content;
    background-color: var(--bg);
    color: var(--text);
    padding: 0.5rem;
    border-radius: calc(var(--border-radius) * 1.5);
    border: var(--border);
    visibility: hidden;
    opacity: 0;
    transition: var(--transition);

    &[open] {
      visibility: visible;
      opacity: 1;
    }
  }
</style>

<script>
  class PunishmentMenu extends HTMLElement {
    constructor() {
      super();

      const id = this.dataset.id;
      const menu = this.querySelector("menu");

      document.addEventListener("click", (e) => {
        if (
          (e.target as HTMLElement).closest(
            `punishment-menu[data-id="${id}"]`
          ) &&
          !menu?.hasAttribute("open")
        ) {
          this.toggleMenu(menu);
        } else {
          this.closeMenu(menu);
        }
      });
    }

    toggleMenu(menu: HTMLMenuElement | null) {
      this.style.backgroundColor = "var(--primary)";
      this.style.color = "var(--on-primary)";
      menu?.toggleAttribute("open");
    }

    closeMenu(menu: HTMLMenuElement | null) {
      this.style.removeProperty("background-color");
      this.style.removeProperty("color");
      menu?.removeAttribute("open");
    }
  }

  customElements.define("punishment-menu", PunishmentMenu);
</script>
