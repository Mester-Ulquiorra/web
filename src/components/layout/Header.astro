---
import { getAPIRoute } from "../../scripts/api";
import { getUserData } from "../../scripts/userData";
import UserProfile from "../user-profile/UserProfile.astro";

const token = Astro.cookies.get("token").value;
const userData = token ? await getUserData(token) : null;

const wsRoute = getAPIRoute("ws");

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<header data-wsroute={wsRoute} data-token={token}>
  <h1>{title}</h1>
  {
    userData && (
      <UserProfile
        userId={userData.userId}
        avatar={userData.avatar}
        userTag={userData.userTag}
      />
    )
  }
</header>

<style>
  header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    background-color: var(--bg);
    border-bottom: var(--border);
  }

  @media (max-width: 768px) {
    h1 {
      display: none;
    }
  }
</style>

<script>
  import { $toastText } from "../../scripts/stores";
  import type { Alert, AlertType } from "../../scripts/alerts";

  // setup the websocket responsible for polling real-time data only when we're not already on the alerts page
  if (location.pathname !== "/alerts") {
    // get the nav element
    const header = document.querySelector("header") as HTMLElement;
    const wsRoute = header.dataset.wsroute;
    const token = header.dataset.token;

    if (wsRoute && token) {
      const wsURL = new URL(wsRoute);
      wsURL.searchParams.append("token", token);
      const ws = new WebSocket(wsURL);

      ws.onmessage = (msg: MessageEvent<string>) => {
        if (msg.data === "ping" || msg.data.startsWith("welcome")) return;

        const alert = JSON.parse(msg.data) as Alert<AlertType>;

        const alertHistory = JSON.parse(
          localStorage.getItem("alertHistory") ?? "[]"
        ) as Alert<AlertType>[];

        alertHistory.push(alert);
        localStorage.setItem("alertHistory", JSON.stringify(alertHistory));

        if (alert.type === "appeal") {
          $toastText.set(
            `Your ${alert.type} has been ${alert.data.status || alert.data.active}: ${alert.data.reason}!` // Gives an error on `alert.data.status` and `alert.data.active`
          );
        }
      };
    }
  }
</script>
